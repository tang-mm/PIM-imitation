# -*- coding: utf-8 -*-
"""
@author: tangmm
"""

import numpy as np
import csv
from os import listdir

def read_mfcc_matrix (directory, filename):
    '''
    Read MFCC matrix (generated by Praat) from text file, which contains 37 features. Return only the 12 first features (C1 - C12).
    
    Input:         
        directory: string
        filename: string

    Return: 
        matrix: array, shape = (n_observation, 12)
    '''
    file_path = directory + filename 

    with open(file_path) as f:
        reader = csv.reader(f, delimiter=' ')
        print '---------- MFCC: ', filename, '-----------'
        for row in reader:
            # line_num begins at 1
            if reader.line_num == 4: break  # skip preliminary lines

        # read only C1-C12
        data = np.loadtxt(f, dtype='float64', delimiter=" ")
        matrix = data[0:12, :].T  # keep C1-C12, then transpose
    print matrix.shape
    return matrix


def read_pitch_or_formant_matrix (directory, filename, datatype):
    '''
    Read Pitch or Formant matrix (generated by Praat) from text file.    
    
    Input:
        directory: string
        filename: string
        datatype: string, either "Pitch" or "Formant". Case-insensitive
            Indicate type of data processed
    Return:
        matrix: array, shape = (n_observation, 1)
    '''
    datatype = datatype.lower()
    if datatype not in ['pitch', 'formant', 'f1', 'f2']:
        raise ValueError('Error: data type must be \'pitch\', \'f1\', \'f2\' or \'formant\'!')
     
    file_path = directory + filename
        
    with open(file_path) as f:
        reader = csv.reader(f, delimiter=' ')
        print '----------', datatype, ':', filename, '-----------'
        for row in reader:
            if reader.line_num == 4: break # skip preliminary lines

        # only 1 line
        data = np.loadtxt(f, dtype='float64', delimiter=" ")
        if datatype == 'pitch':
            data = data[np.nonzero(data)]  # eliminate non-voiced segment (value = 0)
            #TODO compare Formant to Pitch to eliminate non-voiced segments from Formnat
        matrix = data.reshape((data.shape[0], 1)) # reshape to dim 1*n_obs
        print matrix.shape
    return matrix


def read_matrix_from_file(directory, filename, datatype):
    '''
    Aggregates MFCC and Pitch/Formant reading functions.
    '''
    datatype = datatype.lower()
    if datatype not in ['mfcc', 'pitch', 'formant', 'f1', 'f2']:
        raise ValueError('Error: data type must be \'mfcc\', \'pitch\', \'f1\', \'f2\' or \'formant\'!')
        
    if datatype == 'mfcc':
        return read_mfcc_matrix(directory, filename)
    else:  # pitch or formant
        return read_pitch_or_formant_matrix(directory, filename, datatype)
        

def concatenate_all_files(directory, datatype, speaker):
    '''
    Generate a matrix containing original data from all files of the real speaker.
    Input:
        directory: string
            filename format: Ex. Sarkozy_1.txt
        datatype: string, in ['mfcc', 'pitch', 'formant', 'f1', 'f2'], case-insensitive
        speaker: string
            real speaker name. 
    Return: 
        matrix: overall matrix of all files
            if datatype == 'mfcc': shape = (total_n_observation, 12)
            else: shape = (total_n_observation, 1)
    '''
    datatype = datatype.lower()
    if datatype not in ['mfcc', 'pitch', 'formant', 'f1', 'f2']:
        raise ValueError('Error: data type must be \'mfcc\', \'pitch\', \'f1\', \'f2\' or \'formant\'!')
        
    speaker = speaker.lower()
    matrix = np.array([])

    for file_matrix in listdir(directory):
        if file_matrix.split('_')[0].lower() == speaker:  # ex. Sarkozy_1.txt

            new_mat = read_matrix_from_file(directory, file_matrix, datatype) #(n_obs, 12 or 1)
            matrix = np.concatenate((matrix, new_mat)) if matrix.size else new_mat
    
    print datatype, matrix.shape                
    return matrix 
